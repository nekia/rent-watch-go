// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: checker.proto

package checker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckerClient is the client API for Checker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckerClient interface {
	CheckByUrl(ctx context.Context, in *CheckByUrlRequest, opts ...grpc.CallOption) (*CheckByUrlResponse, error)
	CheckByRoomDetail(ctx context.Context, in *CheckByRoomDetailRequest, opts ...grpc.CallOption) (*CheckByRoomDetailResponse, error)
	UpdateCheckStatus(ctx context.Context, in *UpdateCheckStatusRequest, opts ...grpc.CallOption) (*UpdateCheckStatusResponse, error)
}

type checkerClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckerClient(cc grpc.ClientConnInterface) CheckerClient {
	return &checkerClient{cc}
}

func (c *checkerClient) CheckByUrl(ctx context.Context, in *CheckByUrlRequest, opts ...grpc.CallOption) (*CheckByUrlResponse, error) {
	out := new(CheckByUrlResponse)
	err := c.cc.Invoke(ctx, "/checker.Checker/CheckByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) CheckByRoomDetail(ctx context.Context, in *CheckByRoomDetailRequest, opts ...grpc.CallOption) (*CheckByRoomDetailResponse, error) {
	out := new(CheckByRoomDetailResponse)
	err := c.cc.Invoke(ctx, "/checker.Checker/CheckByRoomDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) UpdateCheckStatus(ctx context.Context, in *UpdateCheckStatusRequest, opts ...grpc.CallOption) (*UpdateCheckStatusResponse, error) {
	out := new(UpdateCheckStatusResponse)
	err := c.cc.Invoke(ctx, "/checker.Checker/UpdateCheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckerServer is the server API for Checker service.
// All implementations must embed UnimplementedCheckerServer
// for forward compatibility
type CheckerServer interface {
	CheckByUrl(context.Context, *CheckByUrlRequest) (*CheckByUrlResponse, error)
	CheckByRoomDetail(context.Context, *CheckByRoomDetailRequest) (*CheckByRoomDetailResponse, error)
	UpdateCheckStatus(context.Context, *UpdateCheckStatusRequest) (*UpdateCheckStatusResponse, error)
	mustEmbedUnimplementedCheckerServer()
}

// UnimplementedCheckerServer must be embedded to have forward compatible implementations.
type UnimplementedCheckerServer struct {
}

func (UnimplementedCheckerServer) CheckByUrl(context.Context, *CheckByUrlRequest) (*CheckByUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckByUrl not implemented")
}
func (UnimplementedCheckerServer) CheckByRoomDetail(context.Context, *CheckByRoomDetailRequest) (*CheckByRoomDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckByRoomDetail not implemented")
}
func (UnimplementedCheckerServer) UpdateCheckStatus(context.Context, *UpdateCheckStatusRequest) (*UpdateCheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckStatus not implemented")
}
func (UnimplementedCheckerServer) mustEmbedUnimplementedCheckerServer() {}

// UnsafeCheckerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckerServer will
// result in compilation errors.
type UnsafeCheckerServer interface {
	mustEmbedUnimplementedCheckerServer()
}

func RegisterCheckerServer(s grpc.ServiceRegistrar, srv CheckerServer) {
	s.RegisterService(&Checker_ServiceDesc, srv)
}

func _Checker_CheckByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckByUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServer).CheckByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checker.Checker/CheckByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServer).CheckByUrl(ctx, req.(*CheckByUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checker_CheckByRoomDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckByRoomDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServer).CheckByRoomDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checker.Checker/CheckByRoomDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServer).CheckByRoomDetail(ctx, req.(*CheckByRoomDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checker_UpdateCheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckerServer).UpdateCheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checker.Checker/UpdateCheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckerServer).UpdateCheckStatus(ctx, req.(*UpdateCheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Checker_ServiceDesc is the grpc.ServiceDesc for Checker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Checker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checker.Checker",
	HandlerType: (*CheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckByUrl",
			Handler:    _Checker_CheckByUrl_Handler,
		},
		{
			MethodName: "CheckByRoomDetail",
			Handler:    _Checker_CheckByRoomDetail_Handler,
		},
		{
			MethodName: "UpdateCheckStatus",
			Handler:    _Checker_UpdateCheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checker.proto",
}
